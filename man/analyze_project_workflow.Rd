% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_analyzer.R
\name{analyze_project_workflow}
\alias{analyze_project_workflow}
\title{Analyze project workflow - all-in-one function}
\usage{
analyze_project_workflow(
  script_paths = NULL,
  output_dir = NULL,
  create_annotations = TRUE,
  create_targets = TRUE,
  save_visualization = TRUE,
  save_static_plot = TRUE,
  verbose = TRUE
)
}
\arguments{
\item{script_paths}{Character vector. Paths to R scripts to analyze.
If NULL, automatically finds all scripts in the current project. Default: NULL}

\item{output_dir}{Character. Directory for output files.
If NULL, creates a "projectDependencyAnalyser" subfolder in the project root.
Default: NULL}

\item{create_annotations}{Logical. Create annotated script copies?
Default: TRUE}

\item{create_targets}{Logical. Generate _targets.R template?
Default: TRUE}

\item{save_visualization}{Logical. Save interactive HTML visualization?
Default: TRUE}

\item{save_static_plot}{Logical. Save static PNG plot?
Default: TRUE}

\item{verbose}{Logical. Print progress messages? Default: TRUE}
}
\value{
Invisibly returns a list containing:
  \itemize{
    \item \code{analysis}: Full analysis results from analyze_all_scripts()
    \item \code{graph}: Dependency graph object
    \item \code{execution_order}: Recommended script execution order
  }
}
\description{
Convenience function that runs the complete workflow analysis in a single call.
Automatically finds scripts, analyzes dependencies, creates visualizations,
generates reports, and optionally creates annotated scripts and targets template.
Designed to be called with no arguments from within an R project.
}
\details{
This function performs the complete workflow analysis:
\enumerate{
  \item Finds all R scripts in the project
  \item Analyzes imports and exports for each script
  \item Builds dependency graph
  \item Determines optimal execution order
  \item Generates comprehensive text report
  \item Creates I/O catalog CSV
  \item Saves interactive HTML visualization (optional)
  \item Saves static PNG plot (optional)
  \item Creates annotated script copies (optional)
  \item Generates targets pipeline template (optional)
}

All outputs are saved to a dedicated subfolder to keep your project organized.
By default, creates a \code{projectDependencyAnalyser/} folder in your project root.
}
\section{Output Files}{

The function creates these files in \code{projectDependencyAnalyser/} by default:
\itemize{
  \item \code{workflow_report.txt}: Comprehensive text report
  \item \code{script_io_catalog.csv}: Spreadsheet of all imports/exports
  \item \code{workflow_network.html}: Interactive visualization (if enabled)
  \item \code{workflow_graph.png}: Static plot (if enabled)
  \item \code{R_annotated/}: Annotated script copies (if enabled)
  \item \code{_targets.R}: Targets pipeline template (if enabled)
}
}

\examples{
\dontrun{
# Basic usage - analyze current project with all defaults
analyze_project_workflow()

# Minimal output - just report and visualization
analyze_project_workflow(
  create_annotations = FALSE,
  create_targets = FALSE,
  save_static_plot = FALSE
)

# Custom output directory
analyze_project_workflow(output_dir = "workflow_analysis")

# Analyze specific scripts only
my_scripts <- c("R/01_load.R", "R/02_process.R", "R/03_analyze.R")
analyze_project_workflow(script_paths = my_scripts)

# Quiet mode
results <- analyze_project_workflow(verbose = FALSE)
print(results$execution_order)
}

}
\seealso{
\code{\link{analyze_all_scripts}}, \code{\link{build_dependency_graph}},
  \code{\link{visualize_workflow}}, \code{\link{generate_workflow_report}}
}
