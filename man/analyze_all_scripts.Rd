% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_analyzer.R
\name{analyze_all_scripts}
\alias{analyze_all_scripts}
\title{Batch analyze all scripts in a project}
\usage{
analyze_all_scripts(script_paths = NULL, verbose = TRUE)
}
\arguments{
\item{script_paths}{Character vector. Full paths to R scripts to analyze.
If NULL, defaults to \code{find_r_scripts()} to automatically find all
R scripts in the current project. Default: NULL}

\item{verbose}{Logical. Print progress messages showing which script is
being analyzed? Default: TRUE}
}
\value{
Named list where each element is a script's analysis results. Each
  script's entry contains:
  \itemize{
    \item \code{path}: Full path to the script file
    \item \code{name}: Basename of the script
    \item \code{imports}: Character vector of imported file paths
    \item \code{exports}: Character vector of exported file paths
    \item \code{metadata}: List with title, author, date, description
    \item \code{order}: Numeric prefix from filename (NA if none)
  }
}
\description{
Analyzes multiple R scripts at once, detecting imports, exports, and metadata
for each script. This is the main workhorse function for project-wide analysis.
}
\examples{
\dontrun{
# Analyze all scripts in current project automatically
analysis <- analyze_all_scripts()

# Or specify scripts explicitly
scripts <- find_r_scripts()
analysis <- analyze_all_scripts(scripts)

# Access specific script's data
analysis[["01_load_data.R"]]$imports
analysis[["01_load_data.R"]]$exports

# Analyze quietly
analysis <- analyze_all_scripts(verbose = FALSE)
}

}
\seealso{
\code{\link{find_r_scripts}}, \code{\link{analyze_imports}},
  \code{\link{analyze_exports}}, \code{\link{build_dependency_graph}}
}
